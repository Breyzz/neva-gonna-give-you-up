#include <stdio.h>
#include <string.h>
#include <stdbool.h>
#include <stdlib.h>

struct { // daftar lengkap data user
    char nama[100], email[100], telepon[100], alamat[100], nik[16], username[100], password[100];
    char tanggal_pembuatan[30], transaksi_akhir[30];
    int userID, infoSaldo;
    bool active;
} DataUser;

struct { // daftar lengkap data admin
    char username[100], password[100];
    int adminID;
} DataAdmin;

struct DataTransaksi { // struct untuk transaksi riwayat user
    char tanggal[30], jenis[30], deskripsi[100];
    int transaksiID, userID, jumlah, saldoAkhir;
};

struct TermsServices { // struct untuk fungsi yang butuh tos
    char termsContent[2000], termsDate[30];     
};

void inisialisasi_file() {
    FILE *file_user, *file_admin, *file_transaksi, *file_terms;
    file_user = fopen("data_user.dat", "rb");
    if(file_user == NULL) {
        file_user = fopen("data_user.dat", "wb");
        if(file_user == NULL) {
            printf("File user tidak dapat dibuat!\n");
        } else {
            fclose(file_user);
        }
    } else {
        fclose(file_user);
    }

    file_admin = fopen("data_admin.dat", "rb");
    if(file_admin == NULL) {
        file_admin = fopen("data_admin.dat", "wb");
        if(file_admin == NULL) {
            printf("File admin tidak dapat dibuat!\n");
        } else {
            fclose(file_admin);
        }
    } else {
        fclose(file_admin);
    }
    
    file_transaksi = fopen("data_transaksi.dat", "rb");
    if(file_transaksi == NULL) {
        file_transaksi = fopen("data_transaksi.dat", "wb");
        if(file_transaksi == NULL) {
            printf("File transaksi tidak dapat dibuat!\n");
        } else {
            fclose(file_transaksi);
        }
    } else {
        fclose(file_transaksi);
    }
    
    file_terms = fopen("terms_services.dat", "rb");
    if(file_terms == NULL) {
        file_terms = fopen("terms_services.dat", "wb");
        if(file_terms == NULL) {
            printf("File terms tidak dapat dibuat!\n");
        } else {
            struct TermsServices termsData;
            strcpy(termsData.termsContent, 
                "1. D'Bank adalah layanan perbankan digital.\n"
                "2. Pengguna wajib menjaga kerahasiaan data pribadi.\n"
                "3. D'Bank tidak bertanggung jawab atas kehilangan dana akibat kelalaian pengguna.\n"
                "4. Pengguna diwajibkan melakukan verifikasi identitas saat pembukaan rekening.\n"
                "5. Layanan dapat dinonaktifkan jika terdapat aktivitas mencurigakan.\n"
                "6. D'Bank berhak mengubah ketentuan layanan tanpa pemberitahuan sebelumnya.\n");
            strcpy(termsData.termsDate, "2025-05-10");
            fwrite(&termsData, sizeof(termsData), 1, file_terms);
            fclose(file_terms);
        }
    } else {
        fclose(file_terms);
    }
}

void displayUser() {
    printf("\n=== INFORMASI USER ===\n"); // efisiensi biar nggak display di setiap fungsi
    printf("User ID: %d\n", DataUser.userID);
    printf("Nama: %s\n", DataUser.nama);
    printf("NIK: %s\n", DataUser.nik);
    printf("Email: %s\n", DataUser.email);
    printf("Telepon: %s\n", DataUser.telepon);
    printf("Alamat: %s\n", DataUser.alamat);
    printf("Username: %s\n", DataUser.username);
    printf("Saldo: Rp %d\n", DataUser.infoSaldo);
    printf("Tanggal Pembuatan: %s\n", DataUser.tanggal_pembuatan);
    printf("Transaksi Terakhir: %s\n", DataUser.transaksi_akhir);
    printf("Status Akun: %s\n", DataUser.active ? "Aktif" : "Tidak Aktif"); //tambahan status
}

void ubahTermsService() {
    FILE *file_terms;
    struct TermsServices terms;
    
    file_terms = fopen("terms_services.dat", "rb");
    if (file_terms == NULL) {
        printf("File tidak dapat dibuka!\n");
        return;
    }
    
    if (fread(&terms, sizeof(terms), 1, file_terms) != 1) {
        printf("Error membaca terms & services!\n");
        fclose(file_terms);
        return;
    }
    fclose(file_terms);
    
    printf("\n=== MENGUBAH TERMS AND SERVICE ===\n");
    printf("Terms & Services saat ini (terakhir diupdate: %s):\n", terms.termsDate);
    printf("%s\n", terms.termsContent);
    
    printf("\nMasukkan Terms & Services baru (maksimal 2000 karakter):\n");
    printf("Ketik '/end' pada baris baru untuk mengakhiri input.\n");
    
    char buffer[2000] = ""; // CEK CLAUDE (UDAH)
    char line[100];
    int totalLen = 0;
    
    while (1) {
        fgets(line, sizeof(line), stdin);
        
        if (strcmp(line, "/end\n") == 0) {
            break;
        }
        
        if (totalLen + strlen(line) >= sizeof(buffer)) {
            printf("Melebihi batas maksimal karakter! Teks terpotong.\n");
            break;
        }
        
        strcat(buffer, line);
        totalLen += strlen(line); // kecapean yang dibutuhkan untuk bagian ini (CEK REFERENSI STACKOVERFLOW SAMA CLAUDE.AI)
    }
    
    printf("\nMasukkan nama untuk Terms & Services ini: ");
    char nama_terms[100];
    fgets(nama_terms, sizeof(nama_terms), stdin); // fgets digunakan untuk keamanan yang lebih memadai dari gets. 
    nama_terms[strcspn(nama_terms, "\n")] = 0;
    
    printf("Masukkan tanggal untuk Terms & Services (format: YYYY-MM-DD): ");
    char tanggal_terms[30];
    fgets(tanggal_terms, sizeof(tanggal_terms), stdin);
    tanggal_terms[strcspn(tanggal_terms, "\n")] = 0;
    
    strcpy(terms.termsContent, buffer);
    strcpy(terms.termsDate, tanggal_terms);
    
    file_terms = fopen("terms_services.dat", "wb");
    if (file_terms == NULL) {
        printf("File terms_services.dat tidak dapat dibuka untuk penulisan!\n");
        return;
    }
    
    fwrite(&terms, sizeof(terms), 1, file_terms);
    fclose(file_terms);
    
    printf("\nTerms & Services berhasil diupdate!\n");
}

void lihatRiwayatTransaksi() {
    FILE *file_transaksi, *file_user;
    struct {
        char tanggal[30], jenis[30], deskripsi[100];
        int transaksiID, userID;
        int jumlah, saldoAkhir;
    } transaksi; // struct tambahan dari AI
    
    int search;
    bool nemu_user = false;
    int jumlah_transaksi = 0;
    
    printf("\n=== RIWAYAT TRANSAKSI USER ===\n");
    printf("Masukkan ID User: "); scanf("%d", &search); getchar();
    
    file_user = fopen("data_user.dat", "rb");
    if (file_user == NULL) {
        printf("File data_user.dat tidak dapat dibuka!\n");
        return;
    }

    while(fread(&DataUser, sizeof(DataUser), 1, file_user) == 1) {
        if(DataUser.userID == search) {
            nemu_user = true;
            break;
        }
    }
    fclose(file_user);
    
    if(!nemu_user) {
        printf("Tidak ditemukan User dengan ID %d.\n", search);
        return;
    }
    
    file_transaksi = fopen("data_transaksi.dat", "rb");
    if (file_transaksi == NULL) {
        printf("File data_transaksi.dat tidak dapat dibuka!\n");
        return;
    }

    printf("\nNama User: %s\n", DataUser.nama);
    printf("\n%-5s %-20s %-15s %-30s %-15s %-15s\n", 
           "ID", "Tanggal", "Jenis", "Deskripsi", "Jumlah", "Saldo Akhir"); // sugesti chatGPT
    printf("-----------------------------------------------------------------------------------------------------\n");
    
    while(fread(&transaksi, sizeof(transaksi), 1, file_transaksi) == 1) {
        if(transaksi.userID == search) {
            printf("%-5d %-20s %-15s %-30s Rp %-12d Rp %-12d\n", 
                   transaksi.transaksiID, 
                   transaksi.tanggal, 
                   transaksi.jenis, 
                   transaksi.deskripsi, 
                   transaksi.jumlah, 
                   transaksi.saldoAkhir);
            jumlah_transaksi++; // bag ini AI
        }
    }
    
    fclose(file_transaksi);
    
    if(jumlah_transaksi == 0) {
        printf("Tidak ada riwayat transaksi untuk User ID %d.\n", search);
    } else {
        printf("\nTotal %d transaksi ditemukan.\n", jumlah_transaksi);
    }
}

void lihatDataUser() {
    FILE *file_user;
    int search;
    bool nemu = false;

    printf("\n=== MELIHAT DATA USER ===\n");
    printf("Masukkan ID User: "); scanf("%d", &search); getchar();

    file_user = fopen("data_user.dat", "rb");
    if (file_user == NULL) {
        printf("File data_user.dat tidak dapat dibuka!\n");
        return;
    }

    while(fread(&DataUser, sizeof(DataUser), 1, file_user) == 1) {
        if(DataUser.userID == search) {
            nemu = true;
            displayUser();  
            break;
        }
    }
    
    fclose(file_user);

    if(!nemu) {
        printf("Tidak ditemukan User dengan ID %d.\n", search);
    }
}

void kelolaRekening() {
    int ingin_memodifikasi = 0;
    int search;
    bool nemu = false;
    
    printf("\n=== MENGELOLA REKENING ===\n");
    
    printf("Masukkan ID User: "); 
    scanf("%d", &search); 
    getchar();
    
    FILE *file_user = fopen("data_user.dat", "rb");
    if (file_user == NULL) {
        printf("File data_user.dat tidak dapat dibuka!\n");
        return;
    }

    while(fread(&DataUser, sizeof(DataUser), 1, file_user) == 1) {
        if(DataUser.userID == search) {
            nemu = true;
            break;
        }
    }
    fclose(file_user);
    
    if(!nemu) {
        printf("Tidak ditemukan User dengan ID %d.\n", search);
        return;
    }
    
    printf("\nData User ditemukan:\n");
    displayUser();
    printf("\nApakah ingin memodifikasi data? (1: Ya, 0: Tidak/Tutup Rekening): ");
    scanf("%d", &ingin_memodifikasi);
    getchar();
    
    if(ingin_memodifikasi == 1) {
        FILE *temp_file = fopen("temp.dat", "wb");
        file_user = fopen("data_user.dat", "rb");
        
        if (file_user == NULL || temp_file == NULL) {
            printf("File error!\n");
            if (file_user) fclose(file_user);
            if (temp_file) fclose(temp_file); // CEK CLAUDE (OKE)
            return;
        }
        
        printf("\nMasukkan data baru (kosongkan jika tidak ingin mengubah):\n");
        printf("Nama [%s]: ", DataUser.nama); 
        char input[100]; 
        fgets(input, sizeof(input), stdin); // input digunakan untuk menyimpan data baru dengan mengcopy dan menggunakan fgets
        input[strcspn(input, "\n")] = 0;
        if(strlen(input) > 0) strcpy(DataUser.nama, input); // note: udah ke fix
        
        printf("Email [%s]: ", DataUser.email);
        fgets(input, sizeof(input), stdin);
        input[strcspn(input, "\n")] = 0;
        if(strlen(input) > 0) strcpy(DataUser.email, input);
        
        printf("Telepon [%s]: ", DataUser.telepon);
        fgets(input, sizeof(input), stdin);
        input[strcspn(input, "\n")] = 0;
        if(strlen(input) > 0) strcpy(DataUser.telepon, input); // udah fix
        
        printf("Alamat [%s]: ", DataUser.alamat);
        fgets(input, sizeof(input), stdin);
        input[strcspn(input, "\n")] = 0;
        if(strlen(input) > 0) strcpy(DataUser.alamat, input);
        
        printf("Username [%s]: ", DataUser.username);
        fgets(input, sizeof(input), stdin);
        input[strcspn(input, "\n")] = 0;
        if(strlen(input) > 0) strcpy(DataUser.username, input);
        
        printf("Password [hidden]: ");
        fgets(input, sizeof(input), stdin);
        input[strcspn(input, "\n")] = 0;
        if(strlen(input) > 0) strcpy(DataUser.password, input);
        
        printf("Tanggal Transaksi Terakhir [%s]: ", DataUser.transaksi_akhir);
        fgets(input, sizeof(input), stdin);
        input[strcspn(input, "\n")] = 0;
        if(strlen(input) > 0) strcpy(DataUser.transaksi_akhir, input);
        
        while(fread(&DataUser, sizeof(DataUser), 1, file_user) == 1) { // CEK CLAUDE (UDAH BENER)
            if(DataUser.userID == search) {
                fwrite(&DataUser, sizeof(DataUser), 1, temp_file);
            } else {
                fwrite(&DataUser, sizeof(DataUser), 1, temp_file);
            }
        }
        
        fclose(file_user);
        fclose(temp_file);
        
        remove("data_user.dat");
        rename("temp.dat", "data_user.dat");
        printf("\nData User berhasil diupdate!\n");
    } else {
        printf("\nMasukkan alasan penutupan rekening: ");
        char alasan[100];
        fgets(alasan, sizeof(alasan), stdin);
        alasan[strcspn(alasan, "\n")] = 0;
        
        FILE *temp_file = fopen("temp.dat", "wb");
        file_user = fopen("data_user.dat", "rb");
        
        if (file_user == NULL || temp_file == NULL) {
            printf("File error!\n");
            if (file_user) fclose(file_user);
            if (temp_file) fclose(temp_file); // CEK CLAUDE (OKE)
            return;
        }
        
        nemu = false;
        while(fread(&DataUser, sizeof(DataUser), 1, file_user) == 1) {
            if(DataUser.userID == search) {
                nemu = true;
                DataUser.active = false;
                
                FILE *file_transaksi = fopen("data_transaksi.dat", "ab"); 
                if(file_transaksi != NULL) {
                    struct DataTransaksi transaksi;
                    
                    transaksi.transaksiID = 0; // bag ini AI
                    FILE *count_file = fopen("data_transaksi.dat", "rb");
                    if(count_file != NULL) {
                        fseek(count_file, 0, SEEK_END); // pindah ke bagian file akhir
                        transaksi.transaksiID = ftell(count_file) / sizeof(transaksi);  
                        fclose(count_file);
                    }
                    
                    transaksi.userID = DataUser.userID;
                    strcpy(transaksi.jenis, "TUTUP REKENING");
                    strcpy(transaksi.deskripsi, alasan);
                    printf("Masukkan tanggal penutupan (format: YYYY-MM-DD HH:MM:SS): "); // CEK CLAUDE (UDAH BENAR)
                    fgets(transaksi.tanggal, sizeof(transaksi.tanggal), stdin);
                    transaksi.tanggal[strcspn(transaksi.tanggal, "\n")] = 0;
                    
                    transaksi.jumlah = DataUser.infoSaldo;
                    transaksi.saldoAkhir = 0;
                    
                    fwrite(&transaksi, sizeof(transaksi), 1, file_transaksi);
                    fclose(file_transaksi);
                    
                    strcpy(DataUser.transaksi_akhir, transaksi.tanggal);
                    DataUser.infoSaldo = 0; // CEK CLAUDE (UDAH BENAR)
                }
            }
            
            fwrite(&DataUser, sizeof(DataUser), 1, temp_file);
        }
        
        fclose(file_user);
        fclose(temp_file);
        
        if(nemu) {
            remove("data_user.dat");
            rename("temp.dat", "data_user.dat"); // update file dengan data baru
            printf("\nRekening berhasil ditutup!\n");
        } else {
            remove("temp.dat");
            printf("Error saat memproses data.\n");
        }
    }
}

void logoutAdmin() {
    printf("\nMemperbarui database...\n");
    printf("Logout berhasil. Terima kasih telah menggunakan sistem admin D'Bank.\n");
}

void displayTermsService() {
    FILE *file_terms;
    struct TermsServices terms;
    
    file_terms = fopen("terms_services.dat", "rb");
    if (file_terms == NULL) {
        printf("File tidak dapat dibuka!\n");
        return;
    }
    
    if (fread(&terms, sizeof(terms), 1, file_terms) != 1) {
        printf("Error membaca terms & services!\n");
        fclose(file_terms);
        return;
    }
    fclose(file_terms);
    
    printf("\n=== TERMS & SERVICES D'BANK ===\n");
    printf("(Terakhir diupdate: %s)\n\n", terms.termsDate);
    printf("%s\n", terms.termsContent); // CEK CLAUDE (OKE)
}

int main() {
    int pilihan;
    
    inisialisasi_file();
    printf("\n=== SELAMAT DATANG DI SISTEM ADMIN D'BANK ===\n");
    
    do {
        printf("\n=== MENU ADMIN D'BANK ===\n");
        printf("1. Mengubah Terms & Service\n");
        printf("2. Melihat Riwayat Transaksi User\n");
        printf("3. Melihat Data User Berdasarkan ID\n");
        printf("4. Mengelola Rekening User\n");
        printf("5. Logout\n");
        printf("Pilihan : "); 
        scanf("%d", &pilihan); 
        getchar();

        switch(pilihan) {
            case 1:
                ubahTermsService();
                break;
            case 2:
                lihatRiwayatTransaksi();
                break;
            case 3:
                lihatDataUser();
                break;
            case 4:
                kelolaRekening();
                break;
            case 5:
                logoutAdmin();
                return 0;
            default:
                printf("Pilihan tidak valid! Silahkan pilih menu yang tersedia.\n");
        }
        
        printf("\nTekan Enter untuk kembali ke menu..."); getchar();
        
    } while(pilihan != 5);
    
return 0;
}
